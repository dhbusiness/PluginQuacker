name: Test TremoloViola Plugin

on:
  # Manual trigger from Actions tab
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - unit
      verbose:
        description: 'Verbose output'
        required: false
        default: false
        type: boolean
  
  # Automatic triggers
  push:
    branches: [ main, develop ]
    paths:
      - 'QuackerVST/Source/**'
      - 'Tests/**'
      - '.github/workflows/test-plugin.yml'
  
  pull_request:
    branches: [ main ]
    paths:
      - 'QuackerVST/Source/**'
      - 'Tests/**'

jobs:
  test-macos:
    name: Test macOS
    runs-on: macos-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Update submodules (pull juce)
        run: |
          git submodule update --init --recursive
          
      - name: Setup Environment
        run: |
          echo "Setting up test environment"
          echo "JUCE_VERSION=8.0.6" >> $GITHUB_ENV
          echo "TEST_TYPE=${{ github.event.inputs.test_type || 'all' }}" >> $GITHUB_ENV
          echo "VERBOSE_OUTPUT=${{ github.event.inputs.verbose || 'false' }}" >> $GITHUB_ENV
      
      - name: Build Projucer
        run: |
          echo "Building Projucer..."
          cd QuackerVST/JUCE/extras/Projucer/Builds/MacOSX
          xcodebuild -configuration Release -quiet
          
          # Create a symlink to the built Projucer in the repository root
          cd /Users/runner/work/PluginQuacker/PluginQuacker
          ln -s QuackerVST/JUCE/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer projucer
      
      - name: Generate Test Project
        run: |
          echo "Generating test project with Projucer..."
          ./projucer --resave Tests/TremoloViola_Tests.jucer
       
      - name: Build Test Application
        run: |
          echo "Building test application..."
          cd Tests/Builds/MacOSX
          
          xcodebuild \
            -configuration Release \
            -quiet \
            -target "TremoloViola Tests" \
            build
          
          echo "Test build completed successfully"
          
      - name: Create Tests Directory Structure
        run: |
          echo "Creating test directory structure..."
          mkdir -p Tests/Source
          # The test files will be created by the artifacts above
         
      - name: Run Smoke Tests
        if: env.TEST_TYPE == 'all' || env.TEST_TYPE == 'smoke'
        run: |
          echo "Running smoke tests..."
          cd Tests/Builds/MacOSX/build/Release
          
          VERBOSE_FLAG=""
          if [ "$VERBOSE_OUTPUT" = "true" ]; then
            VERBOSE_FLAG="--verbose"
          fi
          
          if [ -f "./TremoloViola Tests" ]; then
            "./TremoloViola Tests" --smoke $VERBOSE_FLAG
            SMOKE_EXIT_CODE=$?
            echo "SMOKE_TESTS_RESULT=$SMOKE_EXIT_CODE" >> $GITHUB_ENV
          else
            echo "Test executable not found!"
            ls -la
            exit 1
          fi
          
      - name: Run Unit Tests
        if: env.TEST_TYPE == 'all' || env.TEST_TYPE == 'unit'
        run: |
          echo "Running unit tests..."
          cd Tests/Builds/MacOSX/build/Release
          
          VERBOSE_FLAG=""
          if [ "$VERBOSE_OUTPUT" = "true" ]; then
            VERBOSE_FLAG="--verbose"
          fi
          
          "./TremoloViola Tests" --unit $VERBOSE_FLAG
          UNIT_EXIT_CODE=$?
          echo "UNIT_TESTS_RESULT=$UNIT_EXIT_CODE" >> $GITHUB_ENV
          
      - name: Run All Tests
        if: env.TEST_TYPE == 'all'
        run: |
          echo "Running all tests together..."
          cd Tests/Builds/MacOSX/build/Release
          
          VERBOSE_FLAG=""
          if [ "$VERBOSE_OUTPUT" = "true" ]; then
            VERBOSE_FLAG="--verbose"
          fi
          
          "./TremoloViola Tests" --all $VERBOSE_FLAG
          ALL_EXIT_CODE=$?
          echo "ALL_TESTS_RESULT=$ALL_EXIT_CODE" >> $GITHUB_ENV
          
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-macos
          path: |
            Tests/Builds/MacOSX/build/Release/TremoloViola Tests
          retention-days: 7

  test-windows:
    name: Test Windows
    runs-on: windows-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Update submodules (pull juce)
        run: |
          git submodule update --init --recursive
          
      - name: Setup Environment
        run: |
          echo "Setting up test environment"
          echo "JUCE_VERSION=8.0.6" >> $env:GITHUB_ENV
          echo "TEST_TYPE=${{ github.event.inputs.test_type || 'all' }}" >> $env:GITHUB_ENV
          echo "VERBOSE_OUTPUT=${{ github.event.inputs.verbose || 'false' }}" >> $env:GITHUB_ENV
          
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
          
      - name: Build Projucer
        run: |
          echo "Building Projucer..."
          cd QuackerVST/JUCE/extras/Projucer/Builds/VisualStudio2022
          msbuild Projucer.sln /p:Configuration=Release /p:Platform=x64 /verbosity:quiet
          
          # Verify Projucer build
          if (-not (Test-Path "x64/Release/App/Projucer.exe")) {
            Write-Error "Projucer build failed! Executable not found."
            exit 1
          }
          
          # Set the path to Projucer
          cd $env:GITHUB_WORKSPACE
          $projucerPath = "QuackerVST\JUCE\extras\Projucer\Builds\VisualStudio2022\x64\Release\App\Projucer.exe"
          echo "PROJUCER_PATH=$projucerPath" >> $env:GITHUB_ENV
      
      - name: Generate Test Project
        run: |
          echo "Generating test project with Projucer..."
          & "$env:PROJUCER_PATH" --resave "Tests\TremoloViola_Tests.jucer"
       
      - name: Build Test Application
        run: |
          echo "Building test application..."
          cd "Tests\Builds\VisualStudio2022"
          
          msbuild "TremoloViola Tests.sln" /p:Configuration=Release /p:Platform=x64 /verbosity:quiet
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Test build failed with exit code $LASTEXITCODE"
            exit 1
          }
          echo "Test build completed successfully"
      
      - name: Run Smoke Tests
        if: env.TEST_TYPE == 'all' || env.TEST_TYPE == 'smoke'
        run: |
          echo "Running smoke tests..."
          cd "Tests\Builds\VisualStudio2022\x64\Release\App"
          
          $verboseFlag = ""
          if ($env:VERBOSE_OUTPUT -eq "true") {
            $verboseFlag = "--verbose"
          }
          
          if (Test-Path ".\TremoloViola Tests.exe") {
            & ".\TremoloViola Tests.exe" --smoke $verboseFlag
            $smokeExitCode = $LASTEXITCODE
            echo "SMOKE_TESTS_RESULT=$smokeExitCode" >> $env:GITHUB_ENV
          } else {
            echo "Test executable not found!"
            Get-ChildItem
            exit 1
          }
          
      - name: Run Unit Tests
        if: env.TEST_TYPE == 'all' || env.TEST_TYPE == 'unit'
        run: |
          echo "Running unit tests..."
          cd "Tests\Builds\VisualStudio2022\x64\Release\App"
          
          $verboseFlag = ""
          if ($env:VERBOSE_OUTPUT -eq "true") {
            $verboseFlag = "--verbose"
          }
          
          & ".\TremoloViola Tests.exe" --unit $verboseFlag
          $unitExitCode = $LASTEXITCODE
          echo "UNIT_TESTS_RESULT=$unitExitCode" >> $env:GITHUB_ENV
          
      - name: Run All Tests
        if: env.TEST_TYPE == 'all'
        run: |
          echo "Running all tests together..."
          cd "Tests\Builds\VisualStudio2022\x64\Release\App"
          
          $verboseFlag = ""
          if ($env:VERBOSE_OUTPUT -eq "true") {
            $verboseFlag = "--verbose"
          }
          
          & ".\TremoloViola Tests.exe" --all $verboseFlag
          $allExitCode = $LASTEXITCODE
          echo "ALL_TESTS_RESULT=$allExitCode" >> $env:GITHUB_ENV
          
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-windows
          path: |
            Tests/Builds/VisualStudio2022/x64/Release/App/TremoloViola Tests.exe
          retention-days: 7

  test-linux:
    name: Test Linux
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            g++ \
            libasound2-dev \
            libjack-jackd2-dev \
            ladspa-sdk \
            libcurl4-openssl-dev \
            libfreetype6-dev \
            libx11-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxext-dev \
            libxinerama-dev \
            libxrandr-dev \
            libxrender-dev \
            libwebkit2gtk-4.0-dev \
            libglu1-mesa-dev \
            mesa-common-dev
          
      - name: Update submodules (pull juce)
        run: |
          git submodule update --init --recursive
          
      - name: Setup Environment
        run: |
          echo "Setting up test environment"
          echo "JUCE_VERSION=8.0.6" >> $GITHUB_ENV
          echo "TEST_TYPE=${{ github.event.inputs.test_type || 'all' }}" >> $GITHUB_ENV
          echo "VERBOSE_OUTPUT=${{ github.event.inputs.verbose || 'false' }}" >> $GITHUB_ENV
      
      - name: Build Projucer
        run: |
          echo "Building Projucer..."
          cd QuackerVST/JUCE/extras/Projucer/Builds/LinuxMakefile
          make CONFIG=Release -j$(nproc)
          
          # Create a symlink to the built Projucer in the repository root
          cd $GITHUB_WORKSPACE
          ln -s QuackerVST/JUCE/extras/Projucer/Builds/LinuxMakefile/build/Projucer projucer
      
      - name: Generate Test Project
        run: |
          echo "Generating test project with Projucer..."
          ./projucer --resave Tests/TremoloViola_Tests.jucer
       
      - name: Build Test Application
        run: |
          echo "Building test application..."
          cd Tests/Builds/LinuxMakefile
          
          make CONFIG=Release -j$(nproc)
          echo "Test build completed successfully"
      
      - name: Run Smoke Tests
        if: env.TEST_TYPE == 'all' || env.TEST_TYPE == 'smoke'
        run: |
          echo "Running smoke tests..."
          cd Tests/Builds/LinuxMakefile/build
          
          VERBOSE_FLAG=""
          if [ "$VERBOSE_OUTPUT" = "true" ]; then
            VERBOSE_FLAG="--verbose"
          fi
          
          if [ -f "./TremoloViola Tests" ]; then
            "./TremoloViola Tests" --smoke $VERBOSE_FLAG
            SMOKE_EXIT_CODE=$?
            echo "SMOKE_TESTS_RESULT=$SMOKE_EXIT_CODE" >> $GITHUB_ENV
          else
            echo "Test executable not found!"
            ls -la
            exit 1
          fi
          
      - name: Run Unit Tests
        if: env.TEST_TYPE == 'all' || env.TEST_TYPE == 'unit'
        run: |
          echo "Running unit tests..."
          cd Tests/Builds/LinuxMakefile/build
          
          VERBOSE_FLAG=""
          if [ "$VERBOSE_OUTPUT" = "true" ]; then
            VERBOSE_FLAG="--verbose"
          fi
          
          "./TremoloViola Tests" --unit $VERBOSE_FLAG
          UNIT_EXIT_CODE=$?
          echo "UNIT_TESTS_RESULT=$UNIT_EXIT_CODE" >> $GITHUB_ENV
          
      - name: Run All Tests
        if: env.TEST_TYPE == 'all'
        run: |
          echo "Running all tests together..."
          cd Tests/Builds/LinuxMakefile/build
          
          VERBOSE_FLAG=""
          if [ "$VERBOSE_OUTPUT" = "true" ]; then
            VERBOSE_FLAG="--verbose"
          fi
          
          "./TremoloViola Tests" --all $VERBOSE_FLAG
          ALL_EXIT_CODE=$?
          echo "ALL_TESTS_RESULT=$ALL_EXIT_CODE" >> $GITHUB_ENV
          
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-linux
          path: |
            Tests/Builds/LinuxMakefile/build/TremoloViola Tests
          retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-macos, test-windows, test-linux]
    if: always()
    
    steps:
      - name: Check Test Results
        run: |
          echo "=== Test Summary ==="
          echo "macOS Tests: ${{ needs.test-macos.result }}"
          echo "Windows Tests: ${{ needs.test-windows.result }}"
          echo "Linux Tests: ${{ needs.test-linux.result }}"
          
          # Check if any tests failed
          if [ "${{ needs.test-macos.result }}" != "success" ] || \
             [ "${{ needs.test-windows.result }}" != "success" ] || \
             [ "${{ needs.test-linux.result }}" != "success" ]; then
            echo "❌ Some tests failed"
            exit 1
          else
            echo "✅ All tests passed"
          fi