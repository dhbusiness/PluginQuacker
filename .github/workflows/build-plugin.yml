name: Build QuackerVST Plugin

on:
  # Manual trigger from Actions tab
  workflow_dispatch:

jobs:
  build-macos:
    name: Build macOS Plugin
    runs-on: macos-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Update submodules (pull juce)
        run: |
          git submodule update --init --recursive
          
      - name: Setup Environment
        run: |
          echo "Setting up environment variables"
          echo "JUCE_VERSION=8.0.6" >> $GITHUB_ENV
          echo "PLUGIN_NAME=TremoloViolaVST" >> $GITHUB_ENV
      
      - name: Print directory
        run: |
          pwd
          ls
          
      - name: Install the Apple certificate
        env:
          CERTIFICATE_DATA: ${{ secrets.MACOS_CERTIFICATE }}
          CERTIFICATE_PASS: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          # Create a temporary directory for the certificate
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo $CERTIFICATE_DATA | base64 --decode > $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$CERTIFICATE_PASS" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$CERTIFICATE_PASS" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$CERTIFICATE_PASS" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Make sure we see the certificate in the keychain
          security find-identity -v -p codesigning
          
      - name: Create entitlements file
        run: |
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.device.audio-input</key>
              <true/>
          </dict>
          </plist>
          EOF
          
      - name: Download and Build JUCE
        run: |
          cd QuackerVST/JUCE/extras/Projucer/Builds/MacOSX
          xcodebuild -configuration Release
          
          # Create a symlink to the built Projucer in the repository root
          cd /Users/runner/work/PluginQuacker/PluginQuacker
          ln -s QuackerVST/JUCE/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer projucer
      
      - name: Verify Projucer
        run: |
          ls -la ./projucer
          ./projucer --version || echo "Projucer version check failed"
          
      - name: Resave JUCER file
        run: |
          echo "Resaving project file"
          ./projucer --resave QuackerVST/QuackerVST.jucer
       
      - name: Verify Xcode project
        run: |
          echo "Checking if Xcode project exists"
          ls -la QuackerVST/Builds/MacOSX
          
          echo "Checking Xcode project structure"
          ls -la QuackerVST/Builds/MacOSX/*.xcodeproj || echo "No Xcode projects found"
          
          echo "Looking for specific Xcode projects:"
          find QuackerVST/Builds -name "*.xcodeproj" | sort
       
      - name: Build Plugin
        run: |
          echo "Building plugin with verbose output"
          cd QuackerVST/Builds/MacOSX
          xcodebuild -configuration Release -verbose
          echo "Build exit code: $?"
      
      - name: Examine project structure
        run: |
          echo "Examining overall project structure for plugin files"
          find . -name "*.vst3" -o -name "*.component" -o -name "*.app"
          
          echo "All directories under build:"
          find QuackerVST/Builds -type d | sort
          
          echo "Files in build directory (if it exists):"
          find QuackerVST/Builds -type f -name "*.plist" | head -20
          
      - name: Sign the plugin bundles
        run: |
          # Find the actual identity to use from the keychain
          IDENTITY=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1 | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Found signing identity: $IDENTITY"
          
          # Sign VST3 plugins
          find . -name "*.vst3" -type d -exec codesign --force --options runtime --entitlements entitlements.plist --sign "$IDENTITY" {} \;
          
          # Sign AU Components
          find . -name "*.component" -type d -exec codesign --force --options runtime --entitlements entitlements.plist --sign "$IDENTITY" {} \;
          
          # Sign Standalone apps
          find . -name "*.app" -type d -exec codesign --force --options runtime --entitlements entitlements.plist --sign "$IDENTITY" {} \;
          
          # Verify signatures
          echo "Verifying signatures..."
          find . -name "*.vst3" -type d -exec codesign -vvv --deep --strict {} \; || echo "VST3 verification failed"
          find . -name "*.component" -type d -exec codesign -vvv --deep --strict {} \; || echo "AU verification failed"
          find . -name "*.app" -type d -exec codesign -vvv --deep --strict {} \; || echo "App verification failed"
      
      - name: Create artifacts directory
        run: |
          echo "Creating artifacts directory"
          mkdir -p artifacts
      
      - name: Package Plugin (search everywhere)
        run: |
          echo "Searching for plugin files throughout the project"
          
          # Find and package all VST3 plugins
          echo "Finding VST3 plugins..."
          for vst_path in $(find . -name "*.vst3" -type d); do
            vst_name=$(basename "$vst_path" .vst3)
            echo "Found VST3: $vst_path, packaging as $vst_name"
            cd $(dirname "$vst_path")
            zip -r "$GITHUB_WORKSPACE/artifacts/$vst_name-VST3-macOS.zip" "$(basename "$vst_path")"
            cd "$GITHUB_WORKSPACE"
          done
          
          # Find and package all AU components
          echo "Finding AU plugins..."
          for au_path in $(find . -name "*.component" -type d); do
            au_name=$(basename "$au_path" .component)
            echo "Found AU: $au_path, packaging as $au_name"
            cd $(dirname "$au_path")
            zip -r "$GITHUB_WORKSPACE/artifacts/$au_name-AU-macOS.zip" "$(basename "$au_path")"
            cd "$GITHUB_WORKSPACE"
          done
          
          # Find and package all standalone apps
          echo "Finding Standalone apps..."
          for app_path in $(find . -name "*.app" -type d); do
            app_name=$(basename "$app_path" .app)
            echo "Found App: $app_path, packaging as $app_name"
            cd $(dirname "$app_path")
            zip -r "$GITHUB_WORKSPACE/artifacts/$app_name-Standalone-macOS.zip" "$(basename "$app_path")"
            cd "$GITHUB_WORKSPACE"
          done
          
          # If no files were found, create a dummy file to prevent upload failure
          if [ ! "$(ls -A artifacts)" ]; then
            echo "No plugin files found. Creating a dummy file."
            echo "No plugin files were found during the build process. Please check the build logs." > artifacts/build-log.txt
          fi
          
          # List what's in the artifacts directory
          echo "Contents of artifacts directory:"
          ls -la artifacts/
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TremoloViola-macOS-Builds
          path: artifacts/
          retention-days: 30
          if-no-files-found: warn

  build-windows:
    name: Build Windows Plugin
    runs-on: windows-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Update submodules (pull juce)
        run: |
          git submodule update --init --recursive
          
      - name: Setup Environment
        run: |
          echo "Setting up environment variables"
          echo "JUCE_VERSION=8.0.6" >> $env:GITHUB_ENV
          echo "PLUGIN_NAME=TremoloViolaVST" >> $env:GITHUB_ENV
      
      - name: Print directory
        run: |
          Get-Location
          Get-ChildItem
          
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
          
      - name: Build Projucer
        run: |
          cd QuackerVST/JUCE/extras/Projucer/Builds/VisualStudio2022
          msbuild Projucer.sln /p:Configuration=Release /p:Platform=x64
          
          # Verify Projucer build
          if (-not (Test-Path "x64/Release/App/Projucer.exe")) {
            Write-Error "Projucer build failed! Executable not found."
            exit 1
          }
          
          # Create a reference to the Projucer in the repository root
          cd $env:GITHUB_WORKSPACE
          $projucerPath = "QuackerVST\JUCE\extras\Projucer\Builds\VisualStudio2022\x64\Release\App\Projucer.exe"
          echo "PROJUCER_PATH=$projucerPath" >> $env:GITHUB_ENV
      
      - name: Verify Projucer
        run: |
          & "$env:PROJUCER_PATH" --version
          
      - name: Resave JUCER file
        run: |
          echo "Resaving project file"
          & "$env:PROJUCER_PATH" --resave "QuackerVST\QuackerVST.jucer"
       
      - name: Verify Visual Studio project
        run: |
          echo "Checking if Visual Studio project exists"
          Get-ChildItem -Path "QuackerVST\Builds\VisualStudio2022" -Recurse
          
      - name: Build Plugin
        run: |
          echo "Building plugin with verbose output"
          cd "QuackerVST\Builds\VisualStudio2022"
          msbuild "TremoloViolaVST.sln" /p:Configuration=Release /p:Platform=x64 /v:detailed
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Build failed with exit code $LASTEXITCODE"
            exit 1
          }
          echo "Build completed successfully"
      
      - name: Examine build outputs
        run: |
          echo "Examining build directories for outputs"
          Get-ChildItem -Path "QuackerVST\Builds\VisualStudio2022" -Recurse | Where-Object { $_.PSIsContainer } | ForEach-Object { $_.FullName }
          
          echo "Looking for VST3 files:"
          Get-ChildItem -Path "QuackerVST\Builds" -Recurse -Include "*.vst3" | ForEach-Object { $_.FullName }
          
          echo "Looking for executable files:"
          Get-ChildItem -Path "QuackerVST\Builds" -Recurse -Include "*.exe" | ForEach-Object { $_.FullName }
          
      - name: Create artifacts directory
        run: |
          echo "Creating artifacts directory"
          mkdir artifacts
      
      - name: Package Plugin with comprehensive search
        run: |
          echo "Searching for plugin files throughout the project"
          
          # Comprehensive search for VST3 plugins (looking for both directories and files)
          $vst3Files = Get-ChildItem -Path "QuackerVST\Builds" -Recurse -Include "*.vst3*"
          if ($vst3Files) {
            foreach ($vst3File in $vst3Files) {
              $fileName = Split-Path $vst3File -Leaf
              $baseName = $fileName -replace "\.vst3.*$", ""
              echo "Found VST3: $vst3File, packaging as $baseName"
              
              # Check if it's a directory or file and package appropriately
              if (Test-Path -Path $vst3File -PathType Container) {
                Compress-Archive -Path "$vst3File\*" -DestinationPath "artifacts\$baseName-VST3-Windows.zip" -Force
              } else {
                Compress-Archive -Path $vst3File -DestinationPath "artifacts\$baseName-VST3-Windows.zip" -Force
              }
            }
          } else {
            echo "No VST3 files found."
          }
          
          # Comprehensive search for standalone executables
          $exeFiles = Get-ChildItem -Path "QuackerVST\Builds" -Recurse -Include "TremoloViola*.exe", "TremoloViolaVST*.exe"
          if ($exeFiles) {
            foreach ($exeFile in $exeFiles) {
              $fileName = Split-Path $exeFile -Leaf
              $baseName = $fileName -replace "\.exe$", ""
              echo "Found Standalone: $exeFile, packaging as $baseName"
              Compress-Archive -Path $exeFile -DestinationPath "artifacts\$baseName-Standalone-Windows.zip" -Force
            }
          } else {
            echo "No standalone executables found."
          }
          
          # If no files were found, create a dummy file to prevent upload failure
          if (-not (Get-ChildItem -Path artifacts\*.zip)) {
            echo "No plugin files found. Creating a dummy file."
            "No plugin files were found during the build process. Please check the build logs." | Out-File -FilePath "artifacts\build-log.txt"
            
            # Create a log dump to help diagnose the issue
            echo "Creating build diagnostic information..."
            echo "========== DIRECTORY STRUCTURE ==========" > artifacts\build-diagnostics.txt
            Get-ChildItem -Path "QuackerVST\Builds" -Recurse | Out-File -Append -FilePath artifacts\build-diagnostics.txt
          }
          
          # List what's in the artifacts directory
          echo "Contents of artifacts directory:"
          Get-ChildItem artifacts\
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TremoloViola-Windows-Builds
          path: artifacts/
          retention-days: 30
          if-no-files-found: warn
