name: Build JUCE Plugin

on:
  workflow_dispatch:

jobs:
  build:
    name: Build macOS Plugin
    runs-on: macos-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Setup Environment
        run: |
          echo "Setting up environment variables"
          echo "JUCE_VERSION=8.0.6" >> $GITHUB_ENV
          echo "PLUGIN_NAME=TremoloViola" >> $GITHUB_ENV
          echo "WORKSPACE=$(pwd)" >> $GITHUB_ENV
          
      - name: Download and Build JUCE
        run: |
          echo "Downloading JUCE $JUCE_VERSION"
          mkdir -p External
          cd External
          curl -L https://github.com/juce-framework/JUCE/archive/refs/tags/$JUCE_VERSION.zip -o JUCE.zip
          unzip JUCE.zip
          mv JUCE-$JUCE_VERSION JUCE
          
          # Verify JUCE modules exist
          echo "Verifying JUCE modules directory structure:"
          ls -la JUCE/modules
          
          echo "Building Projucer"
          cd JUCE/extras/Projucer/Builds/MacOSX
          xcodebuild -configuration Release
          
          echo "Making Projucer executable available"
          cd ../../../../../
          echo "PROJUCER_PATH=$WORKSPACE/External/JUCE/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer" >> $GITHUB_ENV
      
      - name: Create a Fresh Projucer File
        run: |
          echo "Creating a simplified .jucer file with correct paths"
          # Make backup of original file
          cp "$WORKSPACE/QuackerVST/QuackerVST.jucer" "$WORKSPACE/QuackerVST/QuackerVST.jucer.original"
          
          # Create a modified version of the jucer file with correct module paths
          JUCE_MODULES_PATH="$WORKSPACE/External/JUCE/modules"
          
          # Use Python for more reliable XML manipulation
          python3 -c '
import sys
import os
import xml.etree.ElementTree as ET

# Get command line arguments
jucer_file = sys.argv[1]
modules_path = sys.argv[2]

# Parse XML
tree = ET.parse(jucer_file)
root = tree.getroot()

# Find all MODULEPATH elements and update their path attribute
for modulepath in root.findall(".//MODULEPATH"):
    modulepath.set("path", modules_path)

# Write the updated XML back to the file
tree.write(jucer_file)
          ' "$WORKSPACE/QuackerVST/QuackerVST.jucer" "$JUCE_MODULES_PATH"
          
          echo "Verifying updated jucer file:"
          grep -A 1 MODULEPATH "$WORKSPACE/QuackerVST/QuackerVST.jucer" || echo "No MODULEPATH found"
      
      - name: Resave Project with Projucer
        run: |
          echo "Checking Projucer executable exists at: $PROJUCER_PATH"
          ls -la "$PROJUCER_PATH" || echo "Projucer not found at expected location"
          
          echo "Resaving project file"
          "$PROJUCER_PATH" --resave "$WORKSPACE/QuackerVST/QuackerVST.jucer"
          
          # If the above fails, try an alternate approach
          if [ $? -ne 0 ]; then
            echo "Standard resave failed, attempting alternate approach..."
            
            # First, show all modules in the downloaded JUCE to verify they exist
            echo "Available JUCE modules:"
            find "$WORKSPACE/External/JUCE/modules" -maxdepth 1 -type d | sort
            
            # Try using the --set-global-search-path flag to help Projucer find modules
            echo "Setting global search path for modules"
            "$PROJUCER_PATH" --set-global-search-path osx defaultJuceModulePath "$WORKSPACE/External/JUCE/modules"
            
            # Try resave again
            "$PROJUCER_PATH" --resave "$WORKSPACE/QuackerVST/QuackerVST.jucer"
          fi
      
      - name: Build Plugin
        run: |
          echo "Checking if Xcode project exists"
          if [ ! -d "$WORKSPACE/QuackerVST/Builds/MacOSX" ]; then
            echo "Xcode project not found - likely because Projucer failed to resave"
            echo "Attempting to manually create a minimal Xcode project"
            
            # Create a minimal Xcode project directly for the plugin
            # This is a fallback if Projucer fails
            mkdir -p "$WORKSPACE/QuackerVST/Builds/MacOSX"
            # ... commands to create a basic Xcode project would go here
            exit 1
          fi
          
          echo "Building plugin"
          cd QuackerVST/Builds/MacOSX
          xcodebuild -configuration Release
      
      - name: Package Plugin
        run: |
          echo "Packaging plugin"
          mkdir -p artifacts
          
          # Find all the built plugin files (more flexible approach)
          echo "Looking for built plugin files:"
          find "$WORKSPACE/QuackerVST/Builds" -name "*.vst3" -o -name "*.component" -o -name "*.app"
          
          # Package any VST3 found
          VST3_FILES=$(find "$WORKSPACE/QuackerVST/Builds" -name "*.vst3" -type d)
          if [ ! -z "$VST3_FILES" ]; then
            for vst3 in $VST3_FILES; do
              BASENAME=$(basename "$vst3")
              cd $(dirname "$vst3")
              zip -r "$WORKSPACE/artifacts/${BASENAME%.vst3}-VST3-macOS.zip" "$BASENAME"
              cd "$WORKSPACE"
              echo "Packaged VST3: $BASENAME"
            done
          else
            echo "No VST3 plugins found"
          fi
          
          # Package any AU found
          AU_FILES=$(find "$WORKSPACE/QuackerVST/Builds" -name "*.component" -type d)
          if [ ! -z "$AU_FILES" ]; then
            for au in $AU_FILES; do
              BASENAME=$(basename "$au")
              cd $(dirname "$au")
              zip -r "$WORKSPACE/artifacts/${BASENAME%.component}-AU-macOS.zip" "$BASENAME"
              cd "$WORKSPACE"
              echo "Packaged AU: $BASENAME"
            done
          else
            echo "No AU plugins found"
          fi
          
          # Package any Standalone found
          APP_FILES=$(find "$WORKSPACE/QuackerVST/Builds" -name "*.app" -type d)
          if [ ! -z "$APP_FILES" ]; then
            for app in $APP_FILES; do
              BASENAME=$(basename "$app")
              cd $(dirname "$app")
              zip -r "$WORKSPACE/artifacts/${BASENAME%.app}-Standalone-macOS.zip" "$BASENAME"
              cd "$WORKSPACE"
              echo "Packaged Standalone: $BASENAME"
            done
          else
            echo "No Standalone plugins found"
          fi
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PLUGIN_NAME }}-macOS-Builds
          path: artifacts/
          retention-days: 30
