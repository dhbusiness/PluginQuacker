name: Build QuackerVST Plugin

on:
  # Manual trigger from Actions tab
  workflow_dispatch:

jobs:
  build-macos:
    name: Build macOS Plugin
    runs-on: macos-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Update submodules (pull juce)
        run: |
          git submodule update --init --recursive
          
      - name: Setup Environment
        run: |
          echo "Setting up environment variables"
          echo "JUCE_VERSION=8.0.6" >> $GITHUB_ENV
          echo "PLUGIN_NAME=TremoloViolaVST" >> $GITHUB_ENV
      
      - name: Print directory
        run: |
          pwd
          ls
          
      - name: Download and Build JUCE
        run: |
          cd QuackerVST/JUCE/extras/Projucer/Builds/MacOSX
          xcodebuild -configuration Release
          
          # Create a symlink to the built Projucer in the repository root
          cd /Users/runner/work/PluginQuacker/PluginQuacker
          ln -s QuackerVST/JUCE/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer projucer
      
      - name: Verify Projucer
        run: |
          ls -la ./projucer
          ./projucer --version || echo "Projucer version check failed"
          
      - name: Resave JUCER file
        run: |
          echo "Resaving project file"
          ./projucer --resave QuackerVST/QuackerVST.jucer
       
      - name: Verify Xcode project
        run: |
          echo "Checking if Xcode project exists"
          ls -la QuackerVST/Builds/MacOSX
          
          echo "Checking Xcode project structure"
          ls -la QuackerVST/Builds/MacOSX/*.xcodeproj || echo "No Xcode projects found"
          
          echo "Looking for specific Xcode projects:"
          find QuackerVST/Builds -name "*.xcodeproj" | sort
       
      - name: Build Plugin
        run: |
          echo "Building plugin with verbose output"
          cd QuackerVST/Builds/MacOSX
          xcodebuild -configuration Release -verbose
          echo "Build exit code: $?"
      
      - name: Examine project structure
        run: |
          echo "Examining overall project structure for plugin files"
          find . -name "*.vst3" -o -name "*.component" -o -name "*.app"
          
          echo "All directories under build:"
          find QuackerVST/Builds -type d | sort
          
          echo "Files in build directory (if it exists):"
          find QuackerVST/Builds -type f -name "*.plist" | head -20
      
      - name: Create artifacts directory
        run: |
          echo "Creating artifacts directory"
          mkdir -p artifacts
      
      - name: Package Plugin (search everywhere)
        run: |
          echo "Searching for plugin files throughout the project"
          
          # Find and package all VST3 plugins
          echo "Finding VST3 plugins..."
          for vst_path in $(find . -name "*.vst3" -type d); do
            vst_name=$(basename "$vst_path" .vst3)
            echo "Found VST3: $vst_path, packaging as $vst_name"
            cd $(dirname "$vst_path")
            zip -r "$GITHUB_WORKSPACE/artifacts/$vst_name-VST3-macOS.zip" "$(basename "$vst_path")"
            cd "$GITHUB_WORKSPACE"
          done
          
          # Find and package all AU components
          echo "Finding AU plugins..."
          for au_path in $(find . -name "*.component" -type d); do
            au_name=$(basename "$au_path" .component)
            echo "Found AU: $au_path, packaging as $au_name"
            cd $(dirname "$au_path")
            zip -r "$GITHUB_WORKSPACE/artifacts/$au_name-AU-macOS.zip" "$(basename "$au_path")"
            cd "$GITHUB_WORKSPACE"
          done
          
          # Find and package all standalone apps
          echo "Finding Standalone apps..."
          for app_path in $(find . -name "*.app" -type d); do
            app_name=$(basename "$app_path" .app)
            echo "Found App: $app_path, packaging as $app_name"
            cd $(dirname "$app_path")
            zip -r "$GITHUB_WORKSPACE/artifacts/$app_name-Standalone-macOS.zip" "$(basename "$app_path")"
            cd "$GITHUB_WORKSPACE"
          done
          
          # If no files were found, create a dummy file to prevent upload failure
          if [ ! "$(ls -A artifacts)" ]; then
            echo "No plugin files found. Creating a dummy file."
            echo "No plugin files were found during the build process. Please check the build logs." > artifacts/build-log.txt
          fi
          
          # List what's in the artifacts directory
          echo "Contents of artifacts directory:"
          ls -la artifacts/
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TremoloViola-macOS-Builds
          path: artifacts/
          retention-days: 30
          if-no-files-found: warn

  build-windows:
    name: Build Windows Plugin
    runs-on: windows-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Update submodules (pull juce)
        run: |
          git submodule update --init --recursive
          
      - name: Setup Environment
        run: |
          echo "Setting up environment variables"
          echo "JUCE_VERSION=8.0.6" >> $env:GITHUB_ENV
          echo "PLUGIN_NAME=TremoloViolaVST" >> $env:GITHUB_ENV
      
      - name: Print directory
        run: |
          Get-Location
          Get-ChildItem
          
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
          
      - name: Build Projucer
        run: |
          cd QuackerVST/JUCE/extras/Projucer/Builds/VisualStudio2022
          msbuild Projucer.sln /p:Configuration=Release /p:Platform=x64
          
          # Verify Projucer build
          if (-not (Test-Path "x64/Release/App/Projucer.exe")) {
            Write-Error "Projucer build failed! Executable not found."
            exit 1
          }
          
          # Create a reference to the Projucer in the repository root
          cd $env:GITHUB_WORKSPACE
          $projucerPath = "QuackerVST\JUCE\extras\Projucer\Builds\VisualStudio2022\x64\Release\App\Projucer.exe"
          echo "PROJUCER_PATH=$projucerPath" >> $env:GITHUB_ENV
      
      - name: Verify Projucer
        run: |
          & "$env:PROJUCER_PATH" --version
          
      - name: Resave JUCER file
        run: |
          echo "Resaving project file"
          & "$env:PROJUCER_PATH" --resave "QuackerVST\QuackerVST.jucer"
       
      - name: Verify Visual Studio project
        run: |
          echo "Checking if Visual Studio project exists"
          Get-ChildItem -Path "QuackerVST\Builds\VisualStudio2022"
          
      - name: Build Plugin
        run: |
          echo "Building plugin with verbose output"
          cd "QuackerVST\Builds\VisualStudio2022"
          msbuild "TremoloViolaVST.sln" /p:Configuration=Release /p:Platform=x64
      
      - name: Create artifacts directory
        run: |
          echo "Creating artifacts directory"
          mkdir artifacts
      
      - name: Package Plugin
        run: |
          echo "Searching for plugin files throughout the project"
          
          # Find and package VST3 plugins
          $vst3Path = "QuackerVST\Builds\VisualStudio2022\x64\Release\VST3\TremoloViola.vst3"
          if (Test-Path -Path $vst3Path) {
            echo "Found VST3 plugin, packaging..."
            Compress-Archive -Path $vst3Path -DestinationPath "artifacts\TremoloViola-VST3-Windows.zip" -Force
          }
          
          # Find and package Standalone app
          $standalonePath = "QuackerVST\Builds\VisualStudio2022\x64\Release\Standalone\TremoloViola.exe"
          if (Test-Path -Path $standalonePath) {
            echo "Found Standalone app, packaging..."
            Compress-Archive -Path $standalonePath -DestinationPath "artifacts\TremoloViola-Standalone-Windows.zip" -Force
          }
          
          # If no files were found, create a dummy file to prevent upload failure
          if (-not (Get-ChildItem -Path artifacts\*.zip)) {
            echo "No plugin files found. Creating a dummy file."
            "No plugin files were found during the build process. Please check the build logs." | Out-File -FilePath "artifacts\build-log.txt"
          }
          
          # List what's in the artifacts directory
          echo "Contents of artifacts directory:"
          Get-ChildItem artifacts\
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TremoloViola-Windows-Builds
          path: artifacts/
          retention-days: 30
          if-no-files-found: warn
