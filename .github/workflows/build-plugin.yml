name: Build and Test QuackerVST Plugin

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Update submodules
        run: |
          git submodule update --init --recursive
          
      - name: Run Smoke Test
        run: |
          chmod +x smoke-test-simple.sh
          ./smoke-test-simple.sh

  test:
    name: Run Unit Tests
    needs: smoke-test
    strategy:
      fail-fast: false  # Continue testing other platforms if one fails
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Update submodules (pull juce)
        run: |
          git submodule update --init --recursive
          
      - name: Verify JUCE modules
        run: |
          if [ -d "QuackerVST/JUCE/modules" ]; then
            echo "JUCE modules found at QuackerVST/JUCE/modules"
            ls -la QuackerVST/JUCE/modules/ | head -20
          else
            echo "ERROR: JUCE modules not found!"
            exit 1
          fi
        shell: bash
          
      - name: Setup Build Environment (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "Setting up macOS environment"
          brew install ninja
          
      - name: Setup Build Environment (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.3

      - name: Clean any existing build artifacts
        run: |
          rm -rf build-tests || true
          rm -rf build-simple || true
          rm -f CMakeCache.txt || true
        shell: bash
          
      - name: Create Test Build Directory
        run: |
          mkdir -p build-tests
          
      - name: Configure CMake
        working-directory: build-tests
        timeout-minutes: 10
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            cmake .. -G Ninja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DJUCE_BUILD_EXTRAS=OFF \
              -DJUCE_BUILD_EXAMPLES=OFF \
              -DJUCE_MODULES_ONLY=OFF \
              -DCMAKE_CXX_FLAGS="-Wno-deprecated-declarations -Wno-unused-parameter -Wno-shadow -Wno-extra-semi"
          else
            cmake .. -G "Visual Studio 17 2022" -A x64 \
              -DJUCE_BUILD_EXTRAS=OFF \
              -DJUCE_BUILD_EXAMPLES=OFF \
              -DJUCE_MODULES_ONLY=OFF
          fi
        shell: bash
          
      - name: Build Tests
        working-directory: build-tests
        timeout-minutes: 15
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            ninja -v || (echo "Build failed, showing CMakeFiles/CMakeError.log:"; cat CMakeFiles/CMakeError.log; exit 1)
          else
            cmake --build . --config Debug --verbose || (echo "Build failed"; exit 1)
          fi
        shell: bash
        
      - name: List built executables
        working-directory: build-tests
        run: |
          echo "Contents of build directory:"
          if [ "${{ runner.os }}" == "macOS" ]; then
            find . -type f -perm +111 -name "QuackerVSTTests*"
          else
            find . -name "*.exe" | grep -i test
          fi
        shell: bash
        
      - name: Run Unit Tests
        working-directory: build-tests
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            if [ -f "./QuackerVSTTests" ]; then
              ./QuackerVSTTests --verbose --report --output ../test_results.xml || echo "Tests completed with some failures"
            else
              echo "Test executable not found!"
              exit 1
            fi
          else
            if [ -f "./Debug/QuackerVSTTests.exe" ]; then
              ./Debug/QuackerVSTTests.exe --verbose --report --output ../test_results.xml || echo "Tests completed with some failures"
            elif [ -f "./QuackerVSTTests.exe" ]; then
              ./QuackerVSTTests.exe --verbose --report --output ../test_results.xml || echo "Tests completed with some failures"
            else
              echo "Test executable not found!"
              exit 1
            fi
          fi
        shell: bash
        continue-on-error: true
        
      - name: Create test results if missing
        run: |
          if [ ! -f "test_results.xml" ]; then
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > test_results.xml
            echo "<testsuites name=\"QuackerVST Tests\" tests=\"1\" failures=\"1\">" >> test_results.xml
            echo "  <testsuite name=\"Build\" tests=\"1\" failures=\"1\">" >> test_results.xml
            echo "    <testcase name=\"BuildTest\" classname=\"QuackerVST\">" >> test_results.xml
            echo "      <failure message=\"Build or test execution failed\">Unable to build or run tests</failure>" >> test_results.xml
            echo "    </testcase>" >> test_results.xml
            echo "  </testsuite>" >> test_results.xml
            echo "</testsuites>" >> test_results.xml
          fi
        shell: bash
          
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: |
            test_results.xml
            test_diagnostics.log
          retention-days: 30

  build-macos:
    name: Build macOS Plugin
    runs-on: macos-latest
    needs: [smoke-test]  # Don't require tests to pass to build
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Update submodules (pull juce)
        run: |
          git submodule update --init --recursive
          
      - name: Setup Environment
        run: |
          echo "JUCE_VERSION=8.0.6" >> $GITHUB_ENV
          echo "PLUGIN_NAME=TremoloViolaVST" >> $GITHUB_ENV
          echo "KC_NAME=$RUNNER_TEMP/app-signing.keychain-db" >> $GITHUB_ENV
      
      - name: Install Apple certificates (if available)
        env:
          APPLICATION_CERTIFICATE_DATA: ${{ secrets.MACOS_CERTIFICATE }}
          APPLICATION_CERTIFICATE_PASS: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        run: |
          if [ -n "$APPLICATION_CERTIFICATE_DATA" ] && [ -n "$APPLICATION_CERTIFICATE_PASS" ]; then
            echo "Setting up code signing..."
            APP_CERTIFICATE_PATH=$RUNNER_TEMP/app_certificate.p12
            security delete-keychain "$KC_NAME" 2>/dev/null || true
            echo $APPLICATION_CERTIFICATE_DATA | base64 --decode > $APP_CERTIFICATE_PATH
            security create-keychain -p "$APPLICATION_CERTIFICATE_PASS" "$KC_NAME"
            security set-keychain-settings -lut 21600 "$KC_NAME"
            security unlock-keychain -p "$APPLICATION_CERTIFICATE_PASS" "$KC_NAME"
            security import $APP_CERTIFICATE_PATH -P "$APPLICATION_CERTIFICATE_PASS" -A -t cert -f pkcs12 -k "$KC_NAME"
            security list-keychain -d user -s "$KC_NAME"
            rm -f $APP_CERTIFICATE_PATH
            echo "Code signing configured"
          else
            echo "No code signing certificates provided - will build unsigned"
          fi
          
      - name: Check if Projucer exists
        run: |
          if [ -f "QuackerVST/JUCE/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer" ]; then
            echo "Projucer already built"
            echo "PROJUCER_BUILT=true" >> $GITHUB_ENV
          else
            echo "Projucer needs to be built"
            echo "PROJUCER_BUILT=false" >> $GITHUB_ENV
          fi
          
      - name: Build Projucer
        if: env.PROJUCER_BUILT == 'false'
        run: |
          cd QuackerVST/JUCE/extras/Projucer/Builds/MacOSX
          xcodebuild -configuration Release -jobs 4
          cd $GITHUB_WORKSPACE
          
      - name: Create Projucer symlink
        run: |
          ln -sf QuackerVST/JUCE/extras/Projucer/Builds/MacOSX/build/Release/Projucer.app/Contents/MacOS/Projucer projucer
          chmod +x projucer
          ./projucer --version || echo "Projucer version check failed"
      
      - name: Clean old build artifacts
        run: |
          rm -rf QuackerVST/Builds/MacOSX/*.xcodeproj || true
          rm -rf QuackerVST/Builds/MacOSX/build || true
          rm -rf QuackerVST/JuceLibraryCode || true
          
      - name: Resave JUCER file
        run: |
          ./projucer --resave QuackerVST/QuackerVST.jucer
          
      - name: List generated projects
        run: |
          echo "Contents of Builds/MacOSX:"
          ls -la QuackerVST/Builds/MacOSX/
          echo "Looking for xcodeproj files:"
          find QuackerVST/Builds/MacOSX -name "*.xcodeproj" -type d
       
      - name: Build Plugin
        run: |
          cd QuackerVST/Builds/MacOSX
          
          # Find the generated xcodeproj
          PROJECT_FILE=$(find . -name "*.xcodeproj" -type d | head -1)
          
          if [ -z "$PROJECT_FILE" ]; then
            echo "Error: No Xcode project found!"
            echo "Contents of current directory:"
            ls -la
            exit 1
          fi
          
          echo "Building project: $PROJECT_FILE"
          
          # List available schemes
          xcodebuild -project "$PROJECT_FILE" -list || true
          
          # Try to get signing identity if available
          if security find-identity -v -p codesigning "$KC_NAME" 2>/dev/null | grep -q "Developer ID Application"; then
            IDENTITY=$(security find-identity -v -p codesigning "$KC_NAME" | grep "Developer ID Application" | head -1 | sed -E 's/.*"([^"]+)".*/\1/')
            echo "Building with code signing: $IDENTITY"
            xcodebuild -project "$PROJECT_FILE" -configuration Release -jobs 4 CODE_SIGN_IDENTITY="$IDENTITY" || \
            xcodebuild -project "$PROJECT_FILE" -configuration Release -jobs 4 CODE_SIGN_IDENTITY=""
          else
            echo "Building without code signing"
            xcodebuild -project "$PROJECT_FILE" -configuration Release -jobs 4 CODE_SIGN_IDENTITY=""
          fi

      - name: Find built products
        run: |
          echo "Searching for built products..."
          find QuackerVST/Builds/MacOSX -name "*.vst3" -o -name "*.component" -o -name "*.app" | head -20
          
      - name: Create artifacts directory and package plugins
        run: |
          mkdir -p artifacts
          
          # Find and package all built plugins
          find QuackerVST/Builds/MacOSX -name "*.vst3" -type d | while read vst_path; do
            plugin_name=$(basename "$vst_path" .vst3)
            zip_name="$plugin_name-VST3-macOS.zip"
            echo "Packaging $vst_path as $zip_name"
            cd "$(dirname "$vst_path")"
            zip -r "$GITHUB_WORKSPACE/artifacts/$zip_name" "$(basename "$vst_path")"
            cd "$GITHUB_WORKSPACE"
          done
          
          find QuackerVST/Builds/MacOSX -name "*.component" -type d | while read au_path; do
            plugin_name=$(basename "$au_path" .component)
            zip_name="$plugin_name-AU-macOS.zip"
            echo "Packaging $au_path as $zip_name"
            cd "$(dirname "$au_path")"
            zip -r "$GITHUB_WORKSPACE/artifacts/$zip_name" "$(basename "$au_path")"
            cd "$GITHUB_WORKSPACE"
          done
          
          find QuackerVST/Builds/MacOSX -name "*.app" -type d | while read app_path; do
            plugin_name=$(basename "$app_path" .app)
            zip_name="$plugin_name-Standalone-macOS.zip"
            echo "Packaging $app_path as $zip_name"
            cd "$(dirname "$app_path")"
            zip -r "$GITHUB_WORKSPACE/artifacts/$zip_name" "$(basename "$app_path")"
            cd "$GITHUB_WORKSPACE"
          done
          
          # Create build report
          echo "macOS Build completed on $(date)" > artifacts/build-report.txt
          echo "Available packages:" >> artifacts/build-report.txt
          ls -la artifacts/ >> artifacts/build-report.txt
          
          # Ensure we have at least one artifact
          if [ -z "$(ls -A artifacts/*.zip 2>/dev/null)" ]; then
            echo "WARNING: No plugin artifacts found!"
            echo "Creating placeholder..."
            echo "No plugins were successfully built" > artifacts/build-failed.txt
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TremoloViola-macOS-Builds
          path: artifacts/
          retention-days: 30
          if-no-files-found: warn

  build-windows:
    name: Build Windows Plugin
    runs-on: windows-latest
    needs: [smoke-test]  # Don't require tests to pass to build
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Update submodules (pull juce)
        run: |
          git submodule update --init --recursive
          
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3
          
      - name: Check if Projucer exists
        run: |
          if (Test-Path "QuackerVST\JUCE\extras\Projucer\Builds\VisualStudio2022\x64\Release\App\Projucer.exe") {
            Write-Host "Projucer already built"
            echo "PROJUCER_BUILT=true" >> $env:GITHUB_ENV
          } else {
            Write-Host "Projucer needs to be built"
            echo "PROJUCER_BUILT=false" >> $env:GITHUB_ENV
          }
          
      - name: Build Projucer
        if: env.PROJUCER_BUILT == 'false'
        run: |
          cd QuackerVST/JUCE/extras/Projucer/Builds/VisualStudio2022
          
          # Check if solution exists
          if (!(Test-Path "Projucer.sln")) {
            Write-Error "Projucer.sln not found!"
            Get-ChildItem
            exit 1
          }
          
          msbuild Projucer.sln /p:Configuration=Release /p:Platform=x64 /m
          
          # Verify build succeeded
          if (!(Test-Path "x64/Release/App/Projucer.exe")) {
            Write-Error "Projucer build failed!"
            Get-ChildItem -Recurse | Where-Object { $_.Name -like "*Projucer*" }
            exit 1
          }
          
          cd $env:GITHUB_WORKSPACE
          
      - name: Set Projucer path
        run: |
          $projucerPath = "QuackerVST\JUCE\extras\Projucer\Builds\VisualStudio2022\x64\Release\App\Projucer.exe"
          echo "PROJUCER_PATH=$projucerPath" >> $env:GITHUB_ENV
          
          # Verify Projucer works
          & "$projucerPath" --help
      
      - name: Clean old build artifacts
        run: |
          Remove-Item -Path "QuackerVST\Builds\VisualStudio2022\*.sln" -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "QuackerVST\Builds\VisualStudio2022\*.vcxproj" -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "QuackerVST\Builds\VisualStudio2022\x64" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "QuackerVST\JuceLibraryCode" -Recurse -Force -ErrorAction SilentlyContinue
          
      - name: Resave JUCER file
        run: |
          & "$env:PROJUCER_PATH" --resave "QuackerVST\QuackerVST.jucer"
          
      - name: List generated projects
        run: |
          Write-Host "Contents of Builds\VisualStudio2022:"
          Get-ChildItem "QuackerVST\Builds\VisualStudio2022\"
          
          Write-Host "`nLooking for solution files:"
          Get-ChildItem "QuackerVST\Builds\VisualStudio2022\*.sln"
       
      - name: Build Plugin
        run: |
          cd "QuackerVST\Builds\VisualStudio2022"
          
          # Find the generated solution file
          $solutionFile = Get-ChildItem -Filter "*.sln" | Select-Object -First 1
          
          if (-not $solutionFile) {
            Write-Error "No solution file found!"
            Get-ChildItem
            exit 1
          }
          
          Write-Host "Building solution: $($solutionFile.Name)"
          
          # Build the solution
          msbuild "$($solutionFile.Name)" /p:Configuration=Release /p:Platform=x64 /m
          
          # Check if build succeeded
          $buildSuccess = $LASTEXITCODE -eq 0
          
          if (-not $buildSuccess) {
            Write-Error "Build failed!"
            # Try to find any built artifacts anyway
            Get-ChildItem -Recurse -Include "*.vst3", "*.dll", "*.exe" | ForEach-Object { Write-Host "Found: $_" }
          }
      
      - name: Find built products
        run: |
          Write-Host "Searching for built products..."
          Get-ChildItem -Path "QuackerVST\Builds" -Recurse -Include "*.vst3", "*.exe" | 
            ForEach-Object { Write-Host "Found: $($_.FullName)" }
      
      - name: Create artifacts directory and package plugins
        run: |
          mkdir artifacts
          
          # Find VST3 files
          $vst3Files = Get-ChildItem -Path "QuackerVST\Builds" -Recurse -Filter "*.vst3" -File
          foreach ($vst3File in $vst3Files) {
            $baseName = [System.IO.Path]::GetFileNameWithoutExtension($vst3File.Name)
            $zipName = "$baseName-VST3-Windows.zip"
            Write-Host "Packaging $($vst3File.FullName) as $zipName"
            Compress-Archive -Path $vst3File.FullName -DestinationPath "artifacts\$zipName" -Force
          }
          
          # Find VST3 directories
          $vst3Dirs = Get-ChildItem -Path "QuackerVST\Builds" -Recurse -Filter "*.vst3" -Directory
          foreach ($vst3Dir in $vst3Dirs) {
            $baseName = [System.IO.Path]::GetFileNameWithoutExtension($vst3Dir.Name)
            $zipName = "$baseName-VST3-Windows.zip"
            Write-Host "Packaging directory $($vst3Dir.FullName) as $zipName"
            Compress-Archive -Path "$($vst3Dir.FullName)\*" -DestinationPath "artifacts\$zipName" -Force
          }
          
          # Find standalone executables
          $exeFiles = Get-ChildItem -Path "QuackerVST\Builds" -Recurse -Include "TremoloViola*.exe", "QuackerVST*.exe" -File
          foreach ($exeFile in $exeFiles) {
            if ($exeFile.Directory.Name -ne "App") {  # Skip Projucer
              $baseName = [System.IO.Path]::GetFileNameWithoutExtension($exeFile.Name)
              $zipName = "$baseName-Standalone-Windows.zip"
              Write-Host "Packaging $($exeFile.FullName) as $zipName"
              Compress-Archive -Path $exeFile.FullName -DestinationPath "artifacts\$zipName" -Force
            }
          }
          
          # Create build report
          "Windows Build completed on $(Get-Date)" | Out-File -FilePath "artifacts\build-report.txt"
          "Available packages:" | Out-File -Append -FilePath "artifacts\build-report.txt"
          Get-ChildItem artifacts\ | Out-File -Append -FilePath "artifacts\build-report.txt"
          
          # Ensure we have at least one artifact
          $zipFiles = Get-ChildItem -Path "artifacts" -Filter "*.zip"
          if ($zipFiles.Count -eq 0) {
            Write-Host "WARNING: No plugin artifacts found!"
            "No plugins were successfully built" | Out-File -FilePath "artifacts\build-failed.txt"
          }
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TremoloViola-Windows-Builds
          path: artifacts/
          retention-days: 30
          if-no-files-found: warn